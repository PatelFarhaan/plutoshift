import time
import json
from .models import ModelData
from django.http import JsonResponse
from .fb_prophet import fit_the_model
from django.views.decorators.csrf import csrf_exempt


@csrf_exempt
def test(request):
    if request.method == "POST":
        input_data = json.loads(request.body)
        data = validate_schema(input_data)
        if not data.get("result"):
            return JsonResponse({
                "data": False,
                "result": False,
                "message": "malformed input",
            }, status=400)
        else:
            data = data.get("data")

            # for storing it in the database
            _sub_key = list(data.get("target", {}).keys())
            sub_key = _sub_key[0] if _sub_key else None
            forecast_length = int(data.get("forecast_length").replace("D", ""))

            # predict the result
            result, mse = fit_the_model(data)
            if not result:
                return JsonResponse({
                    "data": None,
                    "result": False,
                    "message": "no data generated by the model",
                }, status=200)

            result = json.loads(result)
            response_obj = []
            for obj in result:
                ds = obj.get("ds")
                if ds:
                    ds = int(str(ds)[:-3])
                    ds = time.strftime('%Y-%m-%d', time.localtime(ds))
                value = obj.get("yhat")
                response_obj.append({
                    "time": ds,
                    "value": value
                })

            user_obj = ModelData.objects.filter(target_name=sub_key).first()
            if not user_obj:
                # New object: insert in the database
                ModelData.objects.create(
                    mse_score=mse,
                    target_name=sub_key,
                    forecast_length=forecast_length)
            else:
                # existing object: Update the records in the database
                user_obj.mse_score = mse
                user_obj.forecast_length = forecast_length
                user_obj.save()

            return JsonResponse({
                "mse": mse,
                "result": True,
                "data": response_obj,
                "message": "success",
            }, status=200)
    else:
        return JsonResponse({
            "data": None,
            "result": False,
            "message": "method not allowed",
        }, status=405)


def validate_schema(data):
    key_object_type = {
        "target": dict,
        "forecast_length": str
    }
    target = data.get("target")
    forecast_length = data.get("forecast_length")
    if not target and forecast_length:
        return {"result": False, "data": None}

    for k, v in key_object_type.items():
        if not isinstance(data[k], v):
            return {"result": False, "data": None}
    return {"result": True, "data": data}
